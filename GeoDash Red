import javax.swing.JPanel;


import javax.swing.JFrame;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Dimension;
import java.util.Random;
import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;
import java.io.*;
import java.util.concurrent.TimeUnit;

public class GeoDash2 extends JPanel implements KeyListener{
    public static final int WIDTH = 1024;
    public static final int HEIGHT = 768;
    public static final int FPS = 60;
    public static final int RADIUS = 50;


    String score;
    //int num = 5;
    //int num2 = 5;
    //Obstacle[] Array = new Obstacle[num]; 
    //Obstacle[] Array2 = new Obstacle[num2];
    Sphere Something = new Sphere();   
    Obstacle[][] Array = new Obstacle[15][30]; //fix
    Obstacle[][] Array2 = new Obstacle[15][30];
    boolean jumping;
    int levelWidth;

    
    class Runner implements Runnable{
        public Runner() {
        /*	for (int i = 0; i < Array.length; i++ ) { 
    		    Array[i] = new Obstacle(i, 0, 400);
    			 }
        	for (int j = 0; j < Array2.length; j++ ) { 
    		    Array2[j] = new Obstacle(j, Array.length, 400); //fix
    			 } */
        	
        	
        	for (int i = 0; i < LevelData.LEVEL1.length; i++) {
        		String line = LevelData.LEVEL1[i];
        		for (int j = 0; j < line.length(); j++) {
        			switch (line.charAt(j)) {
        			case '0':
        				Array[i][j] = new Obstacle(0, 0);
        				Array2[i][j] = new Obstacle(0,0);
        				break;
        			case '1':
        				Array[i][j] = new Obstacle(j, i);
        				Array2[i][j] = new Obstacle(0,0);
        				break;
        			case '2':
        				Array[i][j] = new Obstacle(0, 0);
        				Array2[i][j] = new Obstacle(j, i);
        				break;
        				//Node coin = createEntity(j*60, i*60, 60, 60, Color.GOLD);
        				//coins.add(coin);
        			//	break;
        			}
        		}
        	}
        }

        
        public void run()
        {
        	long timeElapsed = 0;
        	long startTime = System.nanoTime();
            while(Something.blueSquareCollision(Array) && Something.redSquareCollision(Array2)){
            	Something.move(); 	
            	Something.blueSquareCollision(Array);
            	Something.redSquareCollision(Array2);
            	Something.ground();	
            	if (jumping) {
            		Something.jump();
            		jumping = false;
            	}
            	for (int i = 0; i < LevelData.LEVEL1.length; i++) {
            		String line = LevelData.LEVEL1[i];
            		for (int j = 0; j < line.length(); j++) {
            		Array[i][j].move();
            		Array2[i][j].move();
            		}
            	}
            	/*for (int i = 0; i < Array2.length; i++ ) { 
            		Array2[i].move();
            	}*/
                repaint();
                try{
                    Thread.sleep(Something.speed/FPS);
                    long endTime = System.nanoTime();
                    timeElapsed = endTime - startTime;
                    score = Long.toString(timeElapsed/189782);
                }
                catch(InterruptedException e){}
            }
            System.out.println("Your Final Score is: " + score); 
            
            System.exit(3);
        }     
    }
    
    public void keyPressed(KeyEvent e) {
    	char c=e.getKeyChar();	
    	//System.out.println("You pressed down: " + c);
    	if (c == 'w') {
    		jumping = true;
    	}
    	else if(c == 'q')
    		System.exit(1);
    }
    public void keyReleased(KeyEvent e) {
    	//char c=e.getKeyChar();
    	//System.out.println("\tYou let go of: " + c);
       }
    public void keyTyped(KeyEvent e) {
    	//char c = e.getKeyChar();
    	//System.out.println("You typed: " + c);
    }
    public void addNotify() {
        super.addNotify();
        requestFocus();
    }
    public GeoDash2(){
        addKeyListener(this);
        this.setPreferredSize(new Dimension(WIDTH, HEIGHT));
        Thread mainThread = new Thread(new Runner());
        mainThread.start();
    }
    public static void main(String[] args){
        JFrame frame = new JFrame("GeoDash");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        GeoDash2 world = new GeoDash2();
        frame.setContentPane(world);
        frame.pack();
        frame.setVisible(true);
    }
    public void paintComponent(Graphics g) {
        super.paintComponent(g);       
        //board
        g.setColor(Color.BLACK);
        g.fillRect(0, 0, WIDTH, HEIGHT);
        //player
        g.setColor(Color.WHITE);
        g.fillRect((int)Something.positionX, (int)Something.positionY,  (int)Something.side,  (int)Something.side);
        //obstacle
        g.setColor(Color.BLUE);
        for (int i = 0; i < LevelData.LEVEL1.length; i++) {
    		String line = LevelData.LEVEL1[i];
    		for (int j = 0; j < line.length(); j++) {
    		g.fillRect((int)Array[i][j].ObsX,(int)Array[i][j].ObsY, (int)Array[i][j].side, (int)Array[i][j].side);
    		}
    	}
    	//red
    	g.setColor(Color.RED);
        for (int i = 0; i < LevelData.LEVEL1.length; i++) {
    		String line = LevelData.LEVEL1[i];
    		for (int j = 0; j < line.length(); j++) {
    		g.fillRect((int)Array2[i][j].ObsX,(int)Array2[i][j].ObsY, (int)Array2[i][j].side, (int)Array2[i][j].side);
    		}
    	}
    	//title
        String title = "GEODASH";
        g.setColor(Color.WHITE);
        g.drawString(title, WIDTH/2, 200);
        //quit button
        Rectangle quitButton = new Rectangle(10, 50, 100, 37);
        g.drawString("QUIT = Q", quitButton.x + 19, quitButton.y + 29);
        Graphics2D g2d = (Graphics2D) g;
        g2d.draw(quitButton);
        //score
        g.drawString("Your score: " + this.score, 900, 37);
     }    
}



class Sphere {
    double velocityY = 0;
    double gravity = 0.4;
    double side = 20;
    double ground = 70;
    double positionX = 100;
    double positionY = HEIGHT - side - ground;
    boolean canjump = false;
    int speed = 1000;
  
    public static final int WIDTH = 1024;
    public static final int HEIGHT = 768;

	
	public void move() {
         this.positionY += velocityY; 
         this.velocityY += gravity;
	}
	public boolean blueOverlaps (Obstacle input) {
	    return positionX <= input.ObsX + input.side && positionX + side >= input.ObsX && positionY <= input.ObsY + input.side && positionY + side > input.ObsY;
	}          
	public boolean redOverlaps (Obstacle input) {
		return positionX <= input.ObsX + input.side && positionX + side >= input.ObsX && positionY <= input.ObsY + input.side && positionY + side >= input.ObsY;
	}   
	public boolean blueSquareCollision(Obstacle input[][]) {
		for (int i = 0; i < LevelData.LEVEL1.length; i++) {
    		String line = LevelData.LEVEL1[i];
    		for (int j = 0; j < line.length(); j++) {
        	if(this.blueOverlaps(input[i][j])) {									
        				if (this.positionY + side > input[i][j].ObsY) {      //RAD>  if base of sphere lower than top of obs
        					this.velocityY = 0;	
        					this.positionY  = input[i][j].ObsY - side;  // iffy
        					canjump = true;
        				} 
        		return false;
        	}
    		}
        }
     return true;  
	}	
	
	public boolean redSquareCollision(Obstacle input[][]) {
		for (int i = 0; i < LevelData.LEVEL1.length; i++) {
    		String line = LevelData.LEVEL1[i];
    		for (int j = 0; j < line.length(); j++) {
        	if(this.redOverlaps(input[i][j])) {									
        				if (this.positionY + side > input[i][j].ObsY) {      //RAD>  if base of sphere lower than top of obs
        					this.velocityY = 0;	
        					this.positionY  = input[i][j].ObsY - side;  // iffy
        					canjump = true;
        				} 
        		return false;
        	}
    		}
        }
     return true;  
	}	
	
	public void jump() {
			 if (positionY + side == HEIGHT - ground || canjump) {
				 velocityY += -10; 
				 canjump = false;
				 //speed -= 10;
				 //if (speed <= 300)
					 //speed = 300;
			 } 
    }

	public void ground() {
        if (this.positionY + side > HEIGHT) {
        	//positionY = HEIGHT - side - ground;
           	//velocityY = 0;
        	System.exit(1);
           }
	}
         
}

class Obstacle{
	double velocityX = 2 ; //for alter (4)w
	double velocityY = 0; 
	double side = 50;
	double ground = 0;
	double ObsX = 0;
	double ObsY = 0;
    public static final int WIDTH = 1024;
    public static final int HEIGHT = 768;
		
	public Obstacle(double input1, double input2) { //fix
		ObsX = input1 * 50;
		ObsY = input2 * 50;
	}
	
    public void move() {
	    this.ObsX -= velocityX; 
    }
}
