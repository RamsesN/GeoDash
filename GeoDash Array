import javax.swing.JPanel;
import javax.swing.JFrame;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Dimension;
import java.util.Random;
import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;
import java.io.*;

public class GeoDash extends JPanel implements KeyListener{
    public static final int WIDTH = 1024;
    public static final int HEIGHT = 768;
    public static final int FPS = 60;
    public static final int RADIUS = 50;
    double positionX = 100; 
    double positionY = HEIGHT - RADIUS;
    double ObsX = WIDTH - 50;
    double ObsY = HEIGHT - RADIUS;
    //Note: The following are not used yet, you should use them in writing your code.
    double velocityX;
    double velocityY;
    int num = 5;
    Obstacle[] Array = new Obstacle[num];
    
    Sphere Something = new Sphere(positionX, positionY);    
    class Runner implements Runnable{
        public Runner() {
        	for (int i = 0; i < Array.length; i++ ) { 
    		    Array[i] = new Obstacle(ObsX+(200*i), ObsY);
    			 }
        }
        public void run()
        {
        	
            while(true){
            	
            	Something.move(Array); 	
            	
            	Something.bounce();
            	Something.jump();
            	for (int i = 0; i < Array.length; i++ ) { 
            		Array[i].move();
            	}
                repaint();
                try{
                    Thread.sleep(1000/FPS);
                }
                catch(InterruptedException e){}
            }
        }    
        
        
    }
    
    public void keyPressed(KeyEvent e) {
    	char c=e.getKeyChar();	
    	System.out.println("You pressed down: " + c);
    	if (c == ' ') 
    		Something.Up(true);
    	else if(c == 'q')
    		System.exit(1);
    }
    public void keyReleased(KeyEvent e) {
    	char c=e.getKeyChar();
    	System.out.println("\tYou let go of: " + c);
   

    }
    public void keyTyped(KeyEvent e) {
    	char c = e.getKeyChar();
    	System.out.println("You typed: " + c);
    	
    }
    public void addNotify() {
        super.addNotify();
        requestFocus();
    }

    public GeoDash(){
        addKeyListener(this);
        this.setPreferredSize(new Dimension(WIDTH, HEIGHT));
        Thread mainThread = new Thread(new Runner());
        mainThread.start();
    }
    
    public static void main(String[] args){
        JFrame frame = new JFrame("Physics!!!");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        GeoDash world = new GeoDash();
        frame.setContentPane(world);
        frame.pack();
        frame.setVisible(true);
    }

    public void paintComponent(Graphics g) {
        super.paintComponent(g);            

        g.setColor(Color.BLACK);
        g.fillRect(0, 0, WIDTH, HEIGHT);

       

        //this is where the sphere is drawn. As a bonus make it draw something else
        // (e.g., your object from the previous lab).
       
        
        g.setColor(Color.WHITE);
       
        
        //your code here for drawing the other spheres
    	
        g.fillOval((int)Something.positionX, (int)Something.positionY,  RADIUS,  RADIUS);
        
        
        //obstacle
    	for (int i = 0; i < Array.length; i++ ) { 
    		g.fillRect((int)Array[i].ObsX,(int)Array[i].ObsY, 50, 50);
    	}
    	
       String title = "GeoDash";
       g.setColor(Color.WHITE);
       g.drawString(title, WIDTH/2, 200);
       
       Rectangle quitButton = new Rectangle(10, 50, 100, 37);
       g.drawString("Quit = q", quitButton.x + 19, quitButton.y + 29);
       Graphics2D g2d = (Graphics2D) g;
       g2d.draw(quitButton);
    }    
}

class Sphere {
    double positionX;
    double positionY;
    double velocityX = 0;
    double velocityY = 0;
    double gravity = 0.5;
    boolean up;
    
    public static final int WIDTH = 1024;
    public static final int HEIGHT = 768;
    public static final int RADIUS = 50;

	public Sphere(double positionX, double positionY) {
		this.positionX = positionX;
		this.positionY = positionY;
	}
	public void move(Obstacle Array[]) {

         this.positionY += velocityY; 
         this.velocityY += gravity;
         
         for (int i = 0; i < Array.length; i++ ) { 
        	 
        	 if (Array[i].ObsX < this.positionX+RADIUS && Array[i].ObsX > this.positionX - 50){
        		 if (Array[i].ObsY > this.positionY) {
         			 if (this.positionY + RADIUS > HEIGHT - RADIUS) {
        				 this.positionY = HEIGHT - 100 ;
        				 jump();
        			 } 
        		 }   
      	     else if (Array[i].ObsX < this.positionX - 50)
      	    	 System.exit(1);
      		 }
         }
         
    	 }
	
	public void jump() {
		 if (up /*&& this.positionY == HEIGHT - RADIUS*/) {
        	 velocityY += -10;
        	 up = false;
          }
	}

	public void bounce() {
		
       
         if (this.positionY < 0) {
           	velocityY = -velocityY;
           }
         else if (this.positionY + RADIUS > HEIGHT) {
        	positionY = HEIGHT - RADIUS;
           	velocityY = 0;
           }
	}
	public void Up(boolean input) {
		up = input;
	}


}

class Obstacle{
	double ObsX;
	double ObsY;
	double velocityX = 3;
	double velocityY = 0; 
	double gravity = 0;
		
	public Obstacle(double ObsX, double ObsY) {
		this.ObsX = ObsX;
		this.ObsY = ObsY;
	}
	
    public void move() {
	    this.ObsX -= velocityX; 
    }
}

