import javax.swing.JPanel;
import javax.swing.JFrame;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Dimension;
import java.awt.Font;
import java.util.Random;
import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;
import java.io.*;
import java.util.concurrent.TimeUnit;

public class GeoDash extends JPanel implements KeyListener{
    public static final int WIDTH = 1024;
    public static final int HEIGHT = 768;
    public static final int FPS = 60;
    public static final int RADIUS = 50;


    String score;
    int num = 5;
    int num2 = 5;
    Obstacle[] Array = new Obstacle[num]; 
    Obstacle[] Array2 = new Obstacle[num2];
    Sphere Something = new Sphere();   
    boolean jumping;
    boolean gamerunning = true;
    boolean gamestart = true;

    
    class Runner implements Runnable{
        public Runner() {
        	for (int i = 0; i < Array.length; i++ ) { 
    		    Array[i] = new Obstacle(i, 0, 400);
    			 }
        	for (int j = 0; j < Array2.length; j++ ) { 
    		    Array2[j] = new Obstacle(j, Array.length, 400); //fix
    			 }
        }
        public void run(){
        	if(gamerunning /*&& !gamestart*/) {
        	long timeElapsed = 0;
        	long startTime = System.nanoTime();
            while(Something.blueSquareCollision(Array) && Something.redSquareCollision(Array2)){
            	Something.move(); 	
            	Something.blueSquareCollision(Array);
            	Something.redSquareCollision(Array2);
            	Something.ground();	
            	if (jumping) {
            		Something.jump();
            		jumping = false;
            	}
            	for (int i = 0; i < Array.length; i++ ) { 
            		Array[i].move();
            	}
            	for (int i = 0; i < Array2.length; i++ ) { 
            		Array2[i].move();
            	}
                repaint();
                try{
                    Thread.sleep(Something.speed/FPS);
                    long endTime = System.nanoTime();
                    timeElapsed = endTime - startTime;
                    score = Long.toString(timeElapsed/189782);
                    
                }
                catch(InterruptedException e){}
            }
        
            gamerunning = false;
            repaint();
            System.out.println("Your Final Score is: " + score);
        	}
        
        }     
    }
    
    public void keyPressed(KeyEvent e) {
    	char c= e.getKeyChar();	
    	//System.out.println("You pressed down: " + c);
    	if (c == ' ') {
    		jumping = true;
    		gamestart = false;
    		repaint();
    		System.out.println(gamerunning);  
    	}else if(c == 'r') {
    		gamerunning = true;
    		
    		/*for (int i = 0; i < Array.length; i++ ) { 
    		    Array[i] = new Obstacle(i, 0, 400);
    			 }
        	for (int j = 0; j < Array2.length; j++ ) { 
    		    Array2[j] = new Obstacle(j, Array.length, 400); //fix
    			 }*/
    		
    		repaint();
    		
    		System.out.println(gamerunning);
    	}
    	else if(c == 'q')
    		//System.out.println("Your Final Score is: " + score);
    		System.exit(1);
    	
    }
    public void keyReleased(KeyEvent e) {
    	//char c=e.getKeyChar();
    	//System.out.println("\tYou let go of: " + c);
       }
    public void keyTyped(KeyEvent e) {
    	//char c = e.getKeyChar();
    	//System.out.println("You typed: " + c);
    }
    public void addNotify() {
        super.addNotify();
        requestFocus();
    }
    public GeoDash(){
        addKeyListener(this);
        this.setPreferredSize(new Dimension(WIDTH, HEIGHT));
        Thread mainThread = new Thread(new Runner());
        mainThread.start();
    }
    public static void main(String[] args){
        JFrame frame = new JFrame("GeoDash");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        GeoDash world = new GeoDash();
        frame.setContentPane(world);
        frame.pack();
        frame.setVisible(true);
    }
    public void paintComponent(Graphics g) {
        super.paintComponent(g);  
        if(gamestart && gamerunning) {
        	 g.setColor(Color.BLACK);
             g.fillRect(0, 0, WIDTH, HEIGHT);

             String string = "GEO DASH!";
             Font stringFont = new Font( "SansSerif", Font.PLAIN, 100 );
             g.setFont( stringFont );
             g.setColor(Color.CYAN);
             g.drawString(string, 240, 300);
             
             String thing = "Press Space to Play!";
             Font font = new Font( "Times", Font.PLAIN, 25 );
             g.setFont( font );
             g.setColor(Color.blue);
             g.drawString(thing, 700, 100);
        }
        else if(this.gamerunning && !gamestart) {
        //board
        g.setColor(Color.BLACK);
        g.fillRect(0, 0, WIDTH, HEIGHT);
        //player
        g.setColor(Color.WHITE);
        g.fillRect((int)Something.positionX, (int)Something.positionY,  (int)Something.side,  (int)Something.side);
        //obstacle
        g.setColor(Color.BLUE);
    	for (int i = 0; i < Array.length; i++ ) { 
    		g.fillRect((int)Array[i].ObsX,(int)Array[i].ObsY, (int)Array[i].side, (int)Array[i].side);
    	}
    	//red
    	g.setColor(Color.RED);
    	for (int i = 0; i < Array2.length; i++ ) { 
    		g.fillRect((int)Array2[i].ObsX,(int)Array2[i].ObsY, (int)Array2[i].side, (int)Array2[i].side);
    	}
    	//title
        String title = "GEODASH";
        g.setColor(Color.WHITE);
        g.drawString(title, WIDTH/2, 200);
        //quit button
        Rectangle quitButton = new Rectangle(10, 50, 100, 37);
        g.drawString("QUIT = Q", quitButton.x + 19, quitButton.y + 29);
        Graphics2D g2d = (Graphics2D) g;
        g2d.draw(quitButton);
        //score
        g.drawString("Your score: " + this.score, 900, 37);
        }else if(!gamestart && !gamerunning){
            g.setColor(Color.BLACK);
            g.fillRect(0, 0, WIDTH, HEIGHT);

            String string = "GAME OVER!";
            Font stringFont = new Font( "SansSerif", Font.PLAIN, 100 );
            g.setFont( stringFont );
            g.setColor(Color.RED);
            g.drawString(string, 190, 300);
            
            String thing = "Press R to Restart";
            Font font = new Font( "Times", Font.PLAIN, 25 );
            g.setFont( font );
            g.setColor(Color.blue);
            g.drawString(thing, 800, 100);
            
            String thing2 = "Your Final Score is: "+ score;
            g.setFont( font );
            g.setColor(Color.blue);
            g.drawString(thing2, 380, 360);
        	
        }
        }
  

class Sphere {
    double velocityY = 0;
    double gravity = 0.4;
    double side = 50;
    double ground = 0;
    double positionX = 100;
    double positionY = HEIGHT - side - ground;
    boolean canjump = false;
    int speed = 500;
  
    public static final int WIDTH = 1024;
    public static final int HEIGHT = 768;

	
	public void move() {
         this.positionY += velocityY; 
         this.velocityY += gravity;
	}
	public boolean blueOverlaps (Obstacle input) {
	    return positionX <= input.ObsX + input.side && positionX + side >= input.ObsX && positionY <= input.ObsY + input.side && positionY + side > input.ObsY;
	}          
	public boolean redOverlaps (Obstacle input) {
		return positionX <= input.ObsX + input.side && positionX + side >= input.ObsX && positionY <= input.ObsY + input.side && positionY + side >= input.ObsY;
	}   
	public boolean blueSquareCollision(Obstacle input[]) {
        for (int i = 0; i < input.length; i++ ) { 	 
        	if(this.blueOverlaps(input[i])) {									
        				if (this.positionY + side > input[i].ObsY) {      //RAD>  if base of sphere lower than top of obs
        					this.velocityY = 0;	
        					this.positionY  = HEIGHT - input[i].ground - input[i].side - side;  // iffy
        					canjump = true;
        				} 
        		return false;
        	}
        }
     return true;  
	}	
	public boolean redSquareCollision(Obstacle input[]) {
        for (int i = 0; i < input.length; i++ ) { 	 
        	if(this.redOverlaps(input[i])) {								
        				if (this.positionY + side > input[i].ObsY) {      //RAD>  if base of sphere lower than top of obs
        					this.velocityY = 0;	
        					this.positionY  = HEIGHT - input[i].ground - input[i].side - side; //iffy
        					canjump = true;
        				} 
        		return false;
        	}  
        }
     return true;  
	}
	
	public void jump() {
			 if (positionY + side == HEIGHT - ground || canjump) {
				 velocityY += -10; 
				 canjump = false;
				 //speed -= 10;
				 //if (speed <= 300)
					 //speed = 300;
			 } 
    }

	public void ground() {
        if (this.positionY + side > HEIGHT - ground) {
        	positionY = HEIGHT - side - ground;
           	velocityY = 0;
           }
	}
         
}

class Obstacle{
	double velocityX = 4 ; //for alter
	double velocityY = 0; 
	double side = 50;
	double ground = 0;
	double ObsX = WIDTH - 50;
	double ObsY = HEIGHT - side - ground;
    public static final int WIDTH = 1024;
    public static final int HEIGHT = 768;
		
	public Obstacle(int input, int input2, int input3) {
		ObsX = ObsX + (input3*input) + (input3*input2);
	}
	
    public void move() {
	    this.ObsX -= velocityX; 
    }
}
}
